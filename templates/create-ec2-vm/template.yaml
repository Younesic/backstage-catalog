apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: virtualmachine
  title: VirtualMachine
  description: >-
    Crée un claim Crossplane VirtualMachine et injecte automatiquement
    l'annotation terasky.backstage.io/owner afin que le plugin Kubernetes
    Ingestor renseigne correctement le propriétaire.
spec:
  owner: group:infra     # ← propriétaire du TEMPLATE lui‑même
  type: service

  ############################################################
  # 1. FORM PARAMETERS
  ############################################################
  parameters:
    - title: Resource Metadata
      required: [xrName, xrNamespace, owner]
      properties:
        xrName:
          title: Name
          description: Nom unique du VirtualMachine (DNS‑1123)
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          maxLength: 63
        xrNamespace:
          title: Namespace
          description: Namespace cible (default si vide)
          type: string
          pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
          maxLength: 63
          default: default
        owner:
          title: Groupe propriétaire
          type: string
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group]

    - title: Resource Spec
      required: [parameters]
      properties:
        parameters:
          title: Parameters
          type: object
          required: [size]
          properties:
            size:
              title: Instance size
              enum: [nano, micro, small, medium, large]
              type: string

    - title: Crossplane Settings
      properties:
        compositionSelectionStrategy:
          title: Composition Selection Strategy
          type: string
          enum: [runtime, direct-reference, label-selector]
          default: runtime
        compositionRef:
          title: Composition Reference (direct-reference)
          type: object
          properties:
            name:
              title: Composition name
              type: string
              enum: [vm-aws-micro, vm-aws-nano]
        compositionSelector:
          title: Composition Selector (label-selector)
          type: object
          properties:
            matchLabels:
              title: Match Labels
              type: object
              additionalProperties:
                type: string

    - title: Creation Settings
      properties:
        pushToGit:
          title: Push manifest to GitOps repository
          type: boolean
          default: true
        repoUrl:
          title: Repository URL (github.com?owner=<ORG>&repo=<REPO>)
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts: [github.com, gitlab.com]
        targetBranch:
          title: Target branch
          type: string
          default: main
        manifestLayout:
          title: Manifest layout
          type: string
          enum: [cluster-scoped, namespace-scoped, custom]
          default: cluster-scoped
        clusters:
          title: Target clusters (if cluster-scoped)
          type: array
          items:
            type: string
            enum: [microk8s-cluster]
          ui:widget: checkboxes
        basePath:
          title: Base path (if custom layout)
          type: string

  ############################################################
  # 2. WORKFLOW STEPS
  ############################################################
  steps:
    # 2.1 Generate the basic claim manifest
    - id: generate
      name: Generate claim YAML
      action: terasky:claim-template
      input:
        apiVersion: platform.example.org/v1alpha1
        kind: VirtualMachine
        nameParam: xrName
        namespaceParam: xrNamespace
        parameters: ${{ parameters }}
        excludeParams: [owner,pushToGit,repoUrl,targetBranch,manifestLayout,clusters,basePath]
        clusters: [microk8s-cluster]
        fileName: vm-claim.yaml

    # 2.2 Inject owner annotation
      name: Inject owner annotation
      action: yaml:set
      input:
        targetFile: ${{ steps.generate.output.targetPath }}
        path: metadata.annotations.terasky.backstage.io/owner
        value: ${{ parameters.owner }}

    # 2.3 Add compositionRef when strategy is direct-reference
    - id: add-compositionRef
      if: ${{ parameters.compositionSelectionStrategy == 'direct-reference' }}
      name: Add compositionRef
      action: yaml:set
      input:
        targetFile: ${{ steps.generate.output.targetPath }}
        path: spec.compositionRef.name
        value: ${{ parameters.compositionRef.name }}

    # 2.4 Add compositionSelector when strategy is label-selector
    - id: add-compositionSelector
      if: ${{ parameters.compositionSelectionStrategy == 'label-selector' }}
      name: Add compositionSelector
      action: yaml:set
      input:
        targetFile: ${{ steps.generate.output.targetPath }}
        path: spec.compositionSelector.matchLabels
        value: ${{ parameters.compositionSelector.matchLabels }}

    # 2.5 Publish or download
    - id: publish-git
      if: ${{ parameters.pushToGit }}
      name: Publish manifest to Git
      action: publish:github
      input:
        repoUrl: ${{ parameters.repoUrl }}
        branchName: vm-${{ parameters.xrName }}
        targetPath: ${{ steps.generate.output.targetPath }}
        commitMessage: "feat: add VirtualMachine ${{ parameters.xrName }}"
        targetBranch: ${{ parameters.targetBranch }}

    - id: publish-file
      if: ${{ !parameters.pushToGit }}
      name: Provide manifest download
      action: publish:file
      input:
        path: ${{ steps.generate.output.targetPath }}


